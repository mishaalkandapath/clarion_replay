diff --git a/pyClarion/components/elementary.py b/pyClarion/components/elementary.py
index 4e71465..68a51c3 100644
--- a/pyClarion/components/elementary.py
+++ b/pyClarion/components/elementary.py
@@ -386,6 +386,24 @@ class BottomUp(Process):
         if self.input.affected_by(*updates):
             self.update()
 
+    # def update(self, 
+    #     dt: timedelta = timedelta(), 
+    #     priority: int = Priority.PROPAGATION
+    # ) -> None:
+    #     input = self.input[0]
+    #     if self.pre is not None:
+    #         input = self.pre(input)
+    #     main = (self.weights[0]
+    #         .mul(input, by=self.mul_by)
+    #         .max(by=self.max_by)
+    #         .sum(by=self.sum_by)
+    #         .with_default(c=0.0))
+    #     if self.post is not None:
+    #         main = self.post(main)
+    #     self.system.schedule(self.update, 
+    #         self.main.update(main), 
+    #         dt=dt, priority=priority)
+
     def update(self, 
         dt: timedelta = timedelta(), 
         priority: int = Priority.PROPAGATION
@@ -394,10 +412,18 @@ class BottomUp(Process):
         if self.pre is not None:
             input = self.pre(input)
         main = (self.weights[0]
-            .mul(input, by=self.mul_by)
-            .max(by=self.max_by)
-            .sum(by=self.sum_by)
-            .with_default(c=0.0))
+            .mul(input, by=self.mul_by))
+        temp = (main
+                .max(by=self.max_by))
+        another_temp = (main
+                        .min(by=self.max_by)
+                        .simple_where(lambda x: x < 0.0))
+        main = (temp
+                .sum(another_temp)
+                .sum(by=self.sum_by))
+        main = (main
+                .simple_where(lambda x: x >= 0.0)
+                .with_default(c=0.0))
         if self.post is not None:
             main = self.post(main)
         self.system.schedule(self.update, 
diff --git a/pyClarion/numdicts/methods/arithmetic.py b/pyClarion/numdicts/methods/arithmetic.py
index 94d6657..685b5f7 100644
--- a/pyClarion/numdicts/methods/arithmetic.py
+++ b/pyClarion/numdicts/methods/arithmetic.py
@@ -12,6 +12,11 @@ D = TypeVar("D", bound="nd.NumDict")
 _max = max
 _min = min
 
+def simple_where(self: D, cond: callable, replace=0.0) -> D:
+    d = {k: (v if cond(v) else replace) for k, v in self._d.items()}
+    c = self._c if cond(self._c) else replace
+    return type(self)(self._i, d, c, False)
+
 
 def eye(self: D) -> D:
     return self
diff --git a/pyClarion/numdicts/numdicts.py b/pyClarion/numdicts/numdicts.py
index 217adac..8d06c8c 100644
--- a/pyClarion/numdicts/numdicts.py
+++ b/pyClarion/numdicts/numdicts.py
@@ -23,7 +23,7 @@ class NumDict(IndexObserver):
         lte, copysign, with_default, valmax, valmin, argmax, argmin)
     from .methods.arithmetic import (eye, neg, inv, abs, log, log1p, logit, exp, 
         expm1, expit, cosh, sinh, tanh, bound_max, bound_min, const, shift, 
-        scale, pow, sum, sub, mul, div, max, min)
+        scale, pow, sum, sub, mul, div, max, min, simple_where)
     from .methods.statistical import (mean, stdev, variance, pstdev, pvariance)
     from .methods.stochastic import (stduniformvariate, normalvariate, 
         lognormvariate, vonmisesvariate, expovariate, gammavariate, 
